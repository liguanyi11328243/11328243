#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 9
#define EMPTY 0
#define MAX_WRONG 3
#define MAX_HINTS 3

#define COLOR_GREEN "\x1b[32m"
#define COLOR_RED "\x1b[31m"
#define COLOR_RESET "\x1b[0m"

int board[SIZE][SIZE];
int solution[SIZE][SIZE];
int user_correct[SIZE][SIZE] = {0}; // 使用者正確填入的格子
int digit_count[SIZE + 1] = {0};     // 數字 1~9 出現次數

int is_safe(int row, int col, int num) {
    for (int x = 0; x < SIZE; x++) {
        if (board[row][x] == num || board[x][col] == num ||
            board[(row / 3) * 3 + x / 3][(col / 3) * 3 + x % 3] == num)
            return 0;
    }
    return 1;
}

int fill_board() {
    for (int row = 0; row < SIZE; row++) {
        for (int col = 0; col < SIZE; col++) {
            if (board[row][col] == EMPTY) {
                int nums[SIZE];
                for (int i = 0; i < SIZE; i++) nums[i] = i + 1;

                // 打亂順序
                for (int i = 0; i < SIZE - 1; i++) {
                    int j = i + rand() / (RAND_MAX / (SIZE - i) + 1);
                    int t = nums[j];
                    nums[j] = nums[i];
                    nums[i] = t;
                }

                for (int i = 0; i < SIZE; i++) {
                    if (is_safe(row, col, nums[i])) {
                        board[row][col] = nums[i];
                        if (fill_board()) return 1;
                        board[row][col] = EMPTY;
                    }
                }
                return 0;
            }
        }
    }
    return 1;
}

void copy_board_to_solution() {
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            solution[i][j] = board[i][j];
}

void remove_cells(int clues) {
    int removed = 0;
    while (removed < (SIZE * SIZE - clues)) {
        int row = rand() % SIZE;
        int col = rand() % SIZE;
        if (board[row][col] != EMPTY) {
            board[row][col] = EMPTY;
            removed++;
        }
    }
}

void print_horizontal_border() {
    printf("+");
    for (int i = 0; i < SIZE; i++) {
        printf("---");
        if ((i + 1) % 3 == 0) printf("+");
    }
    printf("\n");
}

void print_board() {
    print_horizontal_border();
    for (int i = 0; i < SIZE; i++) {
        printf("|");
        for (int j = 0; j < SIZE; j++) {
            if (board[i][j] == EMPTY) {
                printf(" . ");
            } else if (user_correct[i][j]) {
                printf(COLOR_GREEN " %d " COLOR_RESET, board[i][j]);
            } else {
                printf(" %d ", board[i][j]);
            }

            if ((j + 1) % 3 == 0) printf("|");
        }
        printf("\n");
        if ((i + 1) % 3 == 0) print_horizontal_border();
    }

    printf("尚未填滿數字：");
    int shown = 0;
    for (int i = 1; i <= SIZE; i++) {
        if (digit_count[i] < 9) {
            printf("%d ", i);
            shown = 1;
        }
    }
    if (!shown) printf("無");
    printf("\n\n");
}

int is_board_full() {
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (board[i][j] == EMPTY) return 0;
    return 1;
}

void give_hint() {
    int empty_cells[SIZE * SIZE][2];
    int count = 0;

    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (board[i][j] == EMPTY) {
                empty_cells[count][0] = i;
                empty_cells[count][1] = j;
                count++;
            }

    if (count == 0) {
        printf("已無可提示格。\n");
        return;
    }

    int index = rand() % count;
    int row = empty_cells[index][0];
    int col = empty_cells[index][1];
    int val = solution[row][col];
    board[row][col] = val;
    digit_count[val]++;
    user_correct[row][col] = 1;

    printf("提示：已填入 (%d, %d) = %d\n\n", row + 1, col + 1, val);
    if (digit_count[val] == 9)
        printf("🔒 數字 %d 已填滿，無法再輸入。\n", val);
}

int main() {
    srand((unsigned int)time(NULL));
    time_t start_time, end_time;

    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            board[i][j] = EMPTY;

    if (!fill_board()) {
        printf("生成失敗。\n");
        return 1;
    }

    copy_board_to_solution();

    int clues = 30;
    remove_cells(clues);

    // 初始化 digit_count
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (board[i][j] != EMPTY)
                digit_count[board[i][j]]++;

    printf("🎮 歡迎來玩數獨！\n");
    printf("輸入格式：列(1-9) 行(1-9) 數字(1-9)，輸入 0 要求提示（最多3次）。\n");
    printf("答錯三次遊戲結束！\n\n");

    time(&start_time);
    int wrong_count = 0, hint_count = 0;

    while (1) {
        print_board();

        if (is_board_full()) {
            time(&end_time);
            double seconds = difftime(end_time, start_time);
            printf("🎉 恭喜完成數獨！你贏了！\n");
            printf("⏱️ 花費時間：%.0f 秒\n", seconds);
            break;
        }

        int r, c, val;
        printf("請輸入 (列 行 數字)，或數字 0 要求提示：");
        int res = scanf("%d %d %d", &r, &c, &val);
        if (res != 3) {
            printf("請輸入三個整數。\n");
            while (getchar() != '\n');
            continue;
        }

        if (val == 0) {
            if (hint_count >= MAX_HINTS) {
                printf("⚠️ 提示次數已用完（最多 %d 次）。\n\n", MAX_HINTS);
            } else {
                give_hint();
                hint_count++;
                printf("📌 已使用提示次數：%d / %d\n\n", hint_count, MAX_HINTS);
            }
            continue;
        }

        if (r < 1 || r > 9 || c < 1 || c > 9 || val < 1 || val > 9) {
            printf("數字範圍錯誤。\n");
            continue;
        }

        if (digit_count[val] >= 9) {
            printf(COLOR_RED "⚠️ 數字 %d 已填滿，請選擇其他數字。\n\n" COLOR_RESET, val);
            continue;
        }

        r--; c--;

        if (board[r][c] != EMPTY) {
            printf("此格已有數字，請選擇空格。\n");
            continue;
        }

        if (solution[r][c] == val) {
            board[r][c] = val;
            digit_count[val]++;
            user_correct[r][c] = 1;
            printf(COLOR_GREEN "✅ 答對了！\n\n" COLOR_RESET);
            if (digit_count[val] == 9)
                printf("🔒 數字 %d 已填滿，無法再輸入。\n", val);
        } else {
            wrong_count++;
            printf(COLOR_RED "❌ 答錯！錯誤次數：%d / %d\n\n" COLOR_RESET, wrong_count, MAX_WRONG);
            if (wrong_count >= MAX_WRONG) {
                time(&end_time);
                double seconds = difftime(end_time, start_time);
                printf("💀 錯誤超過三次，遊戲失敗。\n");
                printf("⏱️ 花費時間：%.0f 秒\n", seconds);
                printf("正確解答如下：\n");
                for (int i = 0; i < SIZE; i++) {
                    for (int j = 0; j < SIZE; j++) {
                        printf("%d ", solution[i][j]);
                    }
                    printf("\n");
                }
                break;
            }
        }
    }

    return 0;
}
